# -*- coding: utf-8 -*-
"""lotofacil_simulador2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QiuKSfWRuLRSW6XLwbedMxq_PJ9yMbUl
"""

import streamlit as st
import random
import pandas as pd
import collections
from datetime import datetime

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(
    page_title="Simulador de Lotof√°cil",
    page_icon="üé≤",
    layout="centered"
)

st.title("üé≤ Simulador de Lotof√°cil")
st.write("Gere sorteios aleat√≥rios e veja o hist√≥rico e estat√≠sticas.")

# --- Inicializa√ß√£o do Estado da Sess√£o ---
# O hist√≥rico agora armazenar√° dicion√°rios com 'data' e 'sorteio'
if 'historico_sorteios' not in st.session_state:
    st.session_state.historico_sorteios = []

# --- Fun√ß√µes do Simulador ---

def gerar_sorteio_lotofacil():
    """Gera 15 n√∫meros √∫nicos entre 1 e 25."""
    sorteio = random.sample(range(1, 26), 15)
    sorteio.sort()  # Opcional: para exibir os n√∫meros em ordem crescente
    return sorteio

def adicionar_sorteio_ao_historico(sorteio):
    """Adiciona um sorteio com a data atual ao hist√≥rico da sess√£o."""
    data_atual = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    st.session_state.historico_sorteios.append({'data': data_atual, 'sorteio': sorteio})

def calcular_estatisticas_simuladas():
    """Calcula a frequ√™ncia de cada n√∫mero nos sorteios simulados."""
    todos_numeros_sorteados = []
    for registro in st.session_state.historico_sorteios:
        todos_numeros_sorteados.extend(registro['sorteio'])

    if not todos_numeros_sorteados:
        return pd.DataFrame({'N√∫mero': [], 'Frequ√™ncia': []})

    frequencia = collections.Counter(todos_numeros_sorteados)
    df_frequencia = pd.DataFrame(frequencia.items(), columns=['N√∫mero', 'Frequ√™ncia'])
    df_frequencia = df_frequencia.sort_values(by='Frequ√™ncia', ascending=False)
    return df_frequencia

# --- Layout da Aplica√ß√£o Streamlit ---

# Se√ß√£o de Sorteio
st.header("Gerar Novo Sorteio")
if st.button("Sortear N√∫meros"):
    novo_sorteio = gerar_sorteio_lotofacil()
    adicionar_sorteio_ao_historico(novo_sorteio)
    st.success(f"Seu sorteio gerado: **{', '.join(map(str, novo_sorteio))}**")

# Se√ß√£o de Hist√≥rico e Estat√≠sticas
# Apenas mostra as se√ß√µes se houver sorteios no hist√≥rico
if st.session_state.historico_sorteios:
    st.header("Hist√≥rico de Sorteios Simulados")

    # --- AJUSTE AQUI NO SLIDER ---
    total_sorteios = len(st.session_state.historico_sorteios)
    # Garante que o max_value seja pelo menos 1 se houver sorteios
    max_slider_value = max(1, total_sorteios)
    # Garante que o valor inicial seja o m√≠nimo entre 10 e o total de sorteios
    initial_slider_value = min(10, total_sorteios)
    # Garante que o valor inicial n√£o seja zero se houver pelo menos um sorteio
    if initial_slider_value == 0 and total_sorteios > 0:
        initial_slider_value = 1


    num_sorteios_para_mostrar = st.slider(
        "Mostrar √∫ltimos X sorteios:",
        min_value=1, # Min_value deve ser sempre 1
        max_value=max_slider_value,
        value=initial_slider_value # Usar o valor calculado
    )
    # --- FIM DO AJUSTE NO SLIDER ---

    st.write(f"√öltimos {num_sorteios_para_mostrar} sorteios:")
    # Iterar sobre os sorteios mais recentes
    for i, registro in enumerate(reversed(st.session_state.historico_sorteios[-num_sorteios_para_mostrar:])):
        st.markdown(f"**Sorteio {len(st.session_state.historico_sorteios) - i} em {registro['data']}:** {', '.join(map(str, registro['sorteio']))}")

    if st.button("Limpar Hist√≥rico"):
        st.session_state.historico_sorteios = []
        st.success("Hist√≥rico limpo!")
        st.rerun() # Recarrega a p√°gina para refletir a mudan√ßa

    st.header("Estat√≠sticas dos Seus Sorteios Simulados")
    df_estatisticas = calcular_estatisticas_simuladas()

    if not df_estatisticas.empty:
        st.write("Frequ√™ncia de cada n√∫mero nos seus sorteios simulados:")
        st.dataframe(df_estatisticas, use_container_width=True)

        # Gr√°fico de barras da frequ√™ncia
        st.subheader("Gr√°fico de Frequ√™ncia")
        st.bar_chart(df_estatisticas.set_index('N√∫mero'))

        st.info(f"Total de sorteios simulados: {total_sorteios}")
    # N√£o haver√° 'else' aqui, pois a se√ß√£o inteira s√≥ aparece se houver sorteios

else:
    # Mensagem informativa quando n√£o h√° sorteios para mostrar
    st.info("Gere seu primeiro sorteio para ver o hist√≥rico e as estat√≠sticas!")


st.markdown("---")
st.markdown("Desenvolvido com ‚ù§Ô∏è por [Seu Nome/Empresa]") # Opcional: Adicione sua assinatura