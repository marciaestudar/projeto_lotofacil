# -*- coding: utf-8 -*-
"""lotofacil_simulador5_web.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LwH5pOGYtmaqGJfgCAejkz7CR6Dle2YI
"""

import streamlit as st
import random
import pandas as pd
import collections
from datetime import datetime

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(
    page_title="Simulador de Lotof√°cil",
    page_icon="üé≤",
    layout="centered"
)

st.title("üé≤ Simulador de Lotof√°cil")
st.write("Gere sorteios aleat√≥rios e veja o hist√≥rico e estat√≠sticas.")

# --- Inicializa√ß√£o do Estado da Sess√£o ---
# O hist√≥rico agora armazenar√° dicion√°rios com 'data' e 'sorteio'
if 'historico_sorteios' not in st.session_state:
    st.session_state.historico_sorteios = []

# Vari√°vel para armazenar o √∫ltimo sorteio gerado, antes de ir para o hist√≥rico
if 'ultimo_sorteio_gerado' not in st.session_state:
    st.session_state.ultimo_sorteio_gerado = None

# --- Fun√ß√µes do Simulador ---

def gerar_sorteio_lotofacil():
    """Gera 15 n√∫meros √∫nicos entre 1 e 25."""
    sorteio = random.sample(range(1, 26), 15)
    sorteio.sort()  # Opcional: para exibir os n√∫meros em ordem crescente
    return sorteio

def adicionar_sorteio_ao_historico(sorteio_para_adicionar):
    """
    Adiciona um sorteio ao hist√≥rico DA SESS√ÉO,
    mas apenas se j√° houver um sorteio 'anterior' no ultimo_sorteio_gerado.
    """
    if st.session_state.ultimo_sorteio_gerado is not None:
        data_anterior = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        st.session_state.historico_sorteios.append({
            'data': data_anterior,
            'sorteio': st.session_state.ultimo_sorteio_gerado
        })
    # O sorteio rec√©m-gerado sempre se torna o 'ultimo_sorteio_gerado' para a pr√≥xima rodada
    st.session_state.ultimo_sorteio_gerado = sorteio_para_adicionar


def calcular_estatisticas_simuladas():
    """Calcula a frequ√™ncia de cada n√∫mero nos sorteios simulados do hist√≥rico."""
    todos_numeros_sorteados = []
    for registro in st.session_state.historico_sorteios:
        todos_numeros_sorteados.extend(registro['sorteio'])

    if not todos_numeros_sorteados:
        return pd.DataFrame({'N√∫mero': [], 'Frequ√™ncia': []})

    frequencia = collections.Counter(todos_numeros_sorteados)
    df_frequencia = pd.DataFrame(frequencia.items(), columns=['N√∫mero', 'Frequ√™ncia'])
    df_frequencia = df_frequencia.sort_values(by='Frequ√™ncia', ascending=False)
    return df_frequencia

# --- Layout da Aplica√ß√£o Streamlit ---

# Se√ß√£o de Sorteio
st.header("Gerar Novo Sorteio")
if st.button("Sortear N√∫meros"):
    # Gerar o novo sorteio
    novo_sorteio = gerar_sorteio_lotofacil()

    # Adicionar o sorteio ANTERIOR (se houver) ao hist√≥rico e atualizar o ultimo_sorteio_gerado
    adicionar_sorteio_ao_historico(novo_sorteio)

    # Exibir o sorteio ATUAL rec√©m-gerado
    st.success(f"Seu sorteio atual: **{', '.join(map(str, novo_sorteio))}**")

# Se√ß√£o de Hist√≥rico e Estat√≠sticas
# Apenas mostra as se√ß√µes se houver sorteios no hist√≥rico
if st.session_state.historico_sorteios:
    st.header("Hist√≥rico de Sorteios Simulados")

    total_sorteios = len(st.session_state.historico_sorteios)

    # --- AJUSTE CR√çTICO AQUI NO SLIDER ---
    if total_sorteios > 1: # S√≥ mostra o slider se houver mais de um sorteio no hist√≥rico
        # Garante que o valor inicial do slider seja o m√≠nimo entre 10 e o total de sorteios
        initial_slider_value = min(10, total_sorteios)

        num_sorteios_para_mostrar = st.slider(
            "Mostrar √∫ltimos X sorteios:",
            min_value=1,
            max_value=total_sorteios,
            value=initial_slider_value
        )
    else: # Se houver apenas 1 sorteio no hist√≥rico, n√£o precisamos de slider
        num_sorteios_para_mostrar = 1 # Apenas exibe o √∫nico sorteio existente
    # --- FIM DO AJUSTE ---

    st.write(f"√öltimos {num_sorteios_para_mostrar} sorteios registrados:")
    # Iterar sobre os sorteios mais recentes
    for i, registro in enumerate(reversed(st.session_state.historico_sorteios[-num_sorteios_para_mostrar:])):
        st.markdown(f"**Sorteio {total_sorteios - i} em {registro['data']}:** {', '.join(map(str, registro['sorteio']))}")

    if st.button("Limpar Hist√≥rico"):
        st.session_state.historico_sorteios = []
        st.session_state.ultimo_sorteio_gerado = None # Limpa o √∫ltimo sorteio tamb√©m
        st.success("Hist√≥rico limpo!")
        st.rerun() # Recarrega a p√°gina para refletir a mudan√ßa

    st.header("Estat√≠sticas dos Seus Sorteios Simulados")
    df_estatisticas = calcular_estatisticas_simuladas()

    if not df_estatisticas.empty:
        st.write("Frequ√™ncia de cada n√∫mero nos seus sorteios simulados:")
        st.dataframe(df_estatisticas, use_container_width=True)

        # Gr√°fico de barras da frequ√™ncia
        st.subheader("Gr√°fico de Frequ√™ncia")
        st.bar_chart(df_estatisticas.set_index('N√∫mero'))

        st.info(f"Total de sorteios hist√≥ricos simulados: {total_sorteios}")
    # N√£o haver√° 'else' aqui, pois a se√ß√£o inteira s√≥ aparece se houver sorteios

else:
    # Mensagem informativa quando n√£o h√° sorteios para mostrar
    st.info("O hist√≥rico come√ßar√° a ser registrado a partir do segundo sorteio. Gere seu primeiro sorteio!")


st.markdown("---")
st.markdown("Desenvolvido com ‚ù§Ô∏è por [Seu Nome/Empresa]") # Opcional: Adicione sua assinatura