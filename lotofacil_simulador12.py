# -*- coding: utf-8 -*-
"""lotofacil_simulador12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VMGxnx9bXV6inwF-oe762df55mmadNLI
"""

import streamlit as st
import random
import pandas as pd
import collections
from datetime import datetime
import os # Para verificar a exist√™ncia de arquivos

# --- CONFIGURA√á√ïES DA P√ÅGINA ---
st.set_page_config(
    page_title="Simulador e Estat√≠sticas Lotof√°cil",
    page_icon="üé≤",
    layout="wide" # Layout mais amplo para acomodar mais conte√∫do
)

st.title("üé≤ Simulador e Estat√≠sticas da Lotof√°cil")
st.write("Gere sorteios, confira seus acertos e compare com os dados oficiais da Caixa.")

# --- Nomes dos arquivos de dados CSV ---
ARQUIVO_HISTORICO_OFICIAL_CSV = 'Lotofacil.csv'
ARQUIVO_TABELA_PRECO_CSV = 'Tabela_Preco.csv'
ARQUIVO_MEUS_SIMULADOS_CSV = 'meus_jogos_simulados.csv' # Novo arquivo para hist√≥rico de simulados

# --- Inicializa√ß√£o do Estado da Sess√£o ---
# Vari√°vel para armazenar o √∫ltimo sorteio gerado (simulado) para poss√≠vel salvamento
if 'ultimo_sorteio_gerado_simulado' not in st.session_state:
    st.session_state.ultimo_sorteio_gerado_simulado = None

# --- Fun√ß√µes para Carregar/Salvar Dados CSV ---

@st.cache_data(ttl=3600) # Cache por 1 hora para dados oficiais
def carregar_dados_oficiais():
    """Carrega o hist√≥rico de sorteios oficiais da Lotof√°cil de um CSV."""
    if os.path.exists(ARQUIVO_HISTORICO_OFICIAL_CSV):
        try:
            df = pd.read_csv(ARQUIVO_HISTORICO_OFICIAL_CSV, sep=',')

            # --- DIAGN√ìSTICO: Imprime as colunas lidas do CSV no terminal ---
            print(f"Colunas lidas de {ARQUIVO_HISTORICO_OFICIAL_CSV}: {df.columns.tolist()}")
            # ------------------------------------------------------------------

            # Tenta converter a coluna 'Data Sorteio' para datetime, tratando erros
            # dayfirst=True √© importante se o CSV tiver datas no formato DD/MM/YYYY
            df['Data Sorteio'] = pd.to_datetime(df['Data Sorteio'], errors='coerce', dayfirst=True)
            df.dropna(subset=['Data Sorteio'], inplace=True) # Remove linhas com data inv√°lida (NaT)

            return df
        except Exception as e:
            st.error(f"Erro ao carregar o arquivo '{ARQUIVO_HISTORICO_OFICIAL_CSV}'. Verifique se ele est√° no formato CSV e as colunas est√£o corretas: {e}")
            return pd.DataFrame() # Retorna DataFrame vazio em caso de erro
    return pd.DataFrame()

def salvar_novo_sorteio_oficial(novo_sorteio_df):
    """Salva um novo sorteio oficial no arquivo CSV."""
    df_existente = carregar_dados_oficiais()

    # Remover do cache antes de modificar o arquivo
    st.cache_data.clear() # Limpa todos os caches de dados

    # Adiciona o novo sorteio. Usa ignore_index=True para garantir um novo √≠ndice limpo.
    df_atualizado = pd.concat([df_existente, novo_sorteio_df], ignore_index=True)
    df_atualizado.to_csv(ARQUIVO_HISTORICO_OFICIAL_CSV, index=False, sep=',')
    st.success(f"Novo concurso {novo_sorteio_df['Concurso'].iloc[0]} adicionado com sucesso!")
    st.rerun() # Recarrega a p√°gina para refletir as mudan√ßas

@st.cache_data(ttl=3600) # Cache por 1 hora para tabela de pre√ßos
def carregar_tabela_precos():
    """Carrega a tabela de pre√ßos do jogo de um CSV."""
    if os.path.exists(ARQUIVO_TABELA_PRECO_CSV):
        try:
            df = pd.read_csv(ARQUIVO_TABELA_PRECO_CSV, sep=',')
            return df
        except Exception as e:
            st.error(f"Erro ao carregar o arquivo '{ARQUIVO_TABELA_PRECO_CSV}'. Verifique se ele est√° no formato CSV e as colunas est√£o corretas: {e}")
            return pd.DataFrame()
    return pd.DataFrame()


# --- NOVAS FUN√á√ïES PARA HIST√ìRICO DE JOGOS SIMULADOS ---
@st.cache_data(ttl=60) # Cache mais curto, pois ser√° mais din√¢mico
def carregar_meus_simulados():
    """Carrega o hist√≥rico de jogos simulados do usu√°rio."""
    if os.path.exists(ARQUIVO_MEUS_SIMULADOS_CSV):
        try:
            df = pd.read_csv(ARQUIVO_MEUS_SIMULADOS_CSV, sep=',')
            # Tenta converter a coluna 'Data_Hora' para datetime
            df['Data_Hora'] = pd.to_datetime(df['Data_Hora'], errors='coerce')
            df.dropna(subset=['Data_Hora'], inplace=True)
            return df
        except Exception as e:
            st.error(f"Erro ao carregar o hist√≥rico de jogos simulados '{ARQUIVO_MEUS_SIMULADOS_CSV}': {e}")
            return pd.DataFrame(columns=['ID', 'Data_Hora'] + [f'Bola{i}' for i in range(1, 16)])
    # Se o arquivo n√£o existe, cria um DataFrame vazio com as colunas corretas
    return pd.DataFrame(columns=['ID', 'Data_Hora'] + [f'Bola{i}' for i in range(1, 16)])

def salvar_simulado_no_historico(simulado_lista):
    """Salva um jogo simulado no hist√≥rico CSV."""
    df_existente = carregar_meus_simulados()

    novo_id = 1 if df_existente.empty else df_existente['ID'].max() + 1

    novo_registro_dict = {
        'ID': int(novo_id),
        'Data_Hora': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    for i, bola in enumerate(simulado_lista):
        novo_registro_dict[f'Bola{i+1}'] = bola

    novo_df = pd.DataFrame([novo_registro_dict])

    df_atualizado = pd.concat([df_existente, novo_df], ignore_index=True)
    df_atualizado.to_csv(ARQUIVO_MEUS_SIMULADOS_CSV, index=False, sep=',')
    st.cache_data.clear() # Limpa cache de simulados para recarregar
    st.success(f"Jogo simulado {novo_id} salvo no hist√≥rico!")
    st.rerun() # Recarrega para mostrar o hist√≥rico atualizado

def limpar_meus_simulados_historico():
    """Limpa o arquivo de hist√≥rico de jogos simulados."""
    if os.path.exists(ARQUIVO_MEUS_SIMULADOS_CSV):
        try:
            os.remove(ARQUIVO_MEUS_SIMULADOS_CSV)
            st.cache_data.clear() # Limpa cache de simulados
            st.success("Hist√≥rico de jogos simulados limpo com sucesso!")
        except Exception as e:
            st.error(f"Erro ao limpar hist√≥rico: {e}")
    else:
        st.info("N√£o h√° hist√≥rico de jogos simulados para limpar.")
    st.rerun()

# --- Fun√ß√µes Auxiliares de Estat√≠sticas ---
def calcular_estatisticas_oficiais(df_sorteios):
    """Calcula a frequ√™ncia de cada n√∫mero em um DataFrame de sorteios oficiais."""
    if df_sorteios.empty:
        return pd.DataFrame({'N√∫mero': [], 'Frequ√™ncia': []})

    # Coleta todas as bolas de Bola1 a Bola15
    colunas_bolas = [f'Bola{i}' for i in range(1, 16)]
    # Filtra para ter certeza que as colunas existem antes de tentar coletar
    colunas_existentes = [col for col in colunas_bolas if col in df_sorteios.columns]

    if not colunas_existentes:
        st.warning("N√£o foram encontradas as colunas de bolas (Bola1-Bola15) necess√°rias para calcular as estat√≠sticas oficiais. Verifique a estrutura do seu CSV.")
        return pd.DataFrame({'N√∫mero': [], 'Frequ√™ncia': []})

    todos_numeros_sorteados = df_sorteios[colunas_existentes].values.flatten().tolist()

    frequencia = collections.Counter(todos_numeros_sorteados)
    df_frequencia = pd.DataFrame(frequencia.items(), columns=['N√∫mero', 'Frequ√™ncia'])
    df_frequencia = df_frequencia.sort_values(by='Frequ√™ncia', ascending=False)
    return df_frequencia

# --- LAYOUT DA APLICA√á√ÉO STREAMLIT ---

# Cria√ß√£o de abas (tabs) para organizar o conte√∫do
tab1, tab2, tab3, tab4 = st.tabs(["Simulador e Meus Jogos", "Estat√≠sticas Oficiais", "Inserir Concurso Oficial", "Tabela de Pre√ßos"])

# --- ABA 1: Simulador e Meus Jogos ---
with tab1:
    st.header("Gerar Novo Sorteio Simulado")
    if st.button("Sortear N√∫meros"):
        novo_sorteio_simulado = random.sample(range(1, 26), 15)
        novo_sorteio_simulado.sort()
        st.session_state.ultimo_sorteio_gerado_simulado = novo_sorteio_simulado
        st.success(f"Seu sorteio atual: **{', '.join(map(str, novo_sorteio_simulado))}**")

    if st.session_state.ultimo_sorteio_gerado_simulado:
        if st.button("Salvar este Jogo no Meu Hist√≥rico", help="Salva o sorteio atual para confer√™ncia posterior"):
            salvar_simulado_no_historico(st.session_state.ultimo_sorteio_gerado_simulado)

    st.markdown("---")

    st.header("Meu Hist√≥rico de Jogos Simulados Salvos")
    df_meus_simulados = carregar_meus_simulados()

    if not df_meus_simulados.empty:
        st.write("Aqui est√£o os jogos simulados que voc√™ salvou:")
        # Criar uma c√≥pia para formata√ß√£o de data para exibi√ß√£o
        df_meus_simulados_display = df_meus_simulados.copy()
        if 'Data_Hora' in df_meus_simulados_display.columns:
             df_meus_simulados_display['Data_Hora'] = df_meus_simulados_display['Data_Hora'].dt.strftime('%d/%m/%Y %H:%M:%S').fillna('Data Inv√°lida')

        # Selecionar colunas para exibi√ß√£o
        cols_to_show_simulados = ['ID', 'Data_Hora'] + [f'Bola{i}' for i in range(1, 16)]
        existing_cols_to_show_simulados = [col for col in cols_to_show_simulados if col in df_meus_simulados_display.columns]

        st.dataframe(df_meus_simulados_display[existing_cols_to_show_simulados], use_container_width=True)

        if st.button("Limpar Hist√≥rico de Jogos Simulados Salvos", key="limpar_meus_simulados"):
            limpar_meus_simulados_historico()
    else:
        st.info("Nenhum jogo simulado salvo ainda. Gere um jogo e clique em 'Salvar este Jogo no Meu Hist√≥rico'.")

    st.markdown("---")

    # --- Confer√™ncia de Jogo com Hist√≥rico Salvo ---
    st.header("Conferir Meus Jogos Simulados com N√∫meros Oficiais")
    if not df_meus_simulados.empty:
        with st.form("form_conferencia_jogo_historico"):
            st.write("Insira os 15 n√∫meros oficiais sorteados pela Caixa (separados por v√≠rgula ou espa√ßo):")
            numeros_oficiais_str = st.text_input(
                "N√∫meros Oficiais (ex: 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 24, 25)",
                key="numeros_oficiais_historico_input"
            )
            conferir_button = st.form_submit_button("Conferir Acertos de Todos os Jogos Salvos")

            if conferir_button:
                try:
                    oficiais_lista = [int(n.strip()) for n in numeros_oficiais_str.replace(',', ' ').split() if n.strip().isdigit()]

                    if len(set(oficiais_lista)) != 15:
                        st.error("Por favor, insira exatamente 15 n√∫meros √∫nicos para os n√∫meros oficiais.")
                    elif not all(1 <= num <= 25 for num in oficiais_lista):
                        st.error("Os n√∫meros oficiais devem estar entre 1 e 25.")
                    else:
                        oficiais_set = set(oficiais_lista)
                        st.subheader("Resultados da Confer√™ncia:")

                        colunas_bolas = [f'Bola{i}' for i in range(1, 16)]
                        for index, row in df_meus_simulados.iterrows():
                            # Converte a lista de bolas da linha para um set
                            jogo_simulado_da_linha = set(row[colunas_bolas].tolist())

                            acertos = jogo_simulado_da_linha.intersection(oficiais_set)

                            st.markdown(f"**Jogo ID {int(row['ID'])} (em {row['Data_Hora'].strftime('%d/%m/%Y %H:%M:%S')}):**")
                            st.write(f"   Seu Jogo: {', '.join(map(str, sorted(list(jogo_simulado_da_linha))))}")
                            st.write(f"   Acertos: **{len(acertos)}** n√∫meros")
                            if len(acertos) > 0:
                                st.write(f"   N√∫meros acertados: {', '.join(map(str, sorted(list(acertos))))}")
                            st.markdown("---")

                except ValueError:
                    st.error("Por favor, insira os n√∫meros oficiais em um formato v√°lido (apenas n√∫meros separados por v√≠rgulas ou espa√ßos).")
    else:
        st.info("Salve alguns jogos simulados para poder conferir seus acertos.")


# --- ABA 2: Estat√≠sticas Oficiais ---
with tab2:
    st.header("Estat√≠stica: N√∫meros Oficiais da Caixa")
    df_oficial = carregar_dados_oficiais() # Carrega os dados oficiais (usando cache)

    if not df_oficial.empty:
        st.subheader("Hist√≥rico Completo de Sorteios Oficiais")

        # --- AJUSTE: Filtra as colunas para exibi√ß√£o, pegando apenas as que existem ---
        expected_cols = ['Concurso', 'Data Sorteio'] + [f'Bola{i}' for i in range(1, 16)]
        existing_cols_to_display = [col for col in expected_cols if col in df_oficial.columns]

        # Formata 'Data Sorteio' para exibi√ß√£o (DD/MM/AAAA)
        df_display = df_oficial.copy() # Cria uma c√≥pia para n√£o alterar o DataFrame original
        if 'Data Sorteio' in df_display.columns:
            # Garante que √© datetime antes de formatar, e lida com NaT
            df_display['Data Sorteio'] = df_display['Data Sorteio'].dt.strftime('%d/%m/%Y').fillna('Data Inv√°lida') # <-- CORRE√á√ÉO AQUI

        if existing_cols_to_display:
            st.dataframe(df_display[existing_cols_to_display], use_container_width=True)
        else:
            st.warning("Nenhuma das colunas esperadas ('Concurso', 'Data Sorteio', 'Bola1'...'Bola15') foi encontrada no arquivo CSV oficial para exibi√ß√£o. Verifique os cabe√ßalhos do seu arquivo.")
        # -----------------------------------------------------------------------------

        st.subheader("Frequ√™ncia dos N√∫meros Oficiais")
        df_estatisticas_oficiais = calcular_estatisticas_oficiais(df_oficial)

        if not df_estatisticas_oficiais.empty:
            st.write("Frequ√™ncia de cada n√∫mero nos sorteios oficiais:")
            st.dataframe(df_estatisticas_oficiais, use_container_width=True)
            st.subheader("Gr√°fico de Frequ√™ncia de Oficiais")
            st.bar_chart(df_estatisticas_oficiais.set_index('N√∫mero'))
            st.info(f"Total de concursos oficiais carregados: {len(df_oficial)}")
        else:
            st.warning("N√£o foi poss√≠vel calcular as estat√≠sticas dos n√∫meros oficiais. Verifique a estrutura das colunas 'Bola1'...'Bola15' no seu CSV.")
    else:
        st.warning(f"Arquivo '{ARQUIVO_HISTORICO_OFICIAL_CSV}' n√£o encontrado ou vazio. Por favor, adicione um arquivo CSV com o hist√≥rico de sorteios oficiais ou insira novos concursos na aba 'Inserir Concurso Oficial'.")

# --- ABA 3: Inserir Concurso Oficial ---
with tab3:
    st.header("Adicionar Novo Concurso Oficial da Caixa")
    st.write("Preencha os campos abaixo para adicionar um novo resultado de concurso oficial.")

    with st.form("form_novo_concurso"):
        col1, col2 = st.columns(2)
        with col1:
            concurso = st.number_input("N√∫mero do Concurso", min_value=1, step=1, key="concurso_input")
        with col2:
            data_sorteio = st.date_input("Data do Sorteio", datetime.now().date(), key="data_sorteio_input") # .date() para pegar apenas a data

        st.subheader("Bolas Sorteadas (1 a 25)")

        # Cria 3 linhas de 5 colunas para as bolas
        bolas = []
        for row in range(3):
            cols_bolas = st.columns(5)
            for i in range(5):
                bola_index = row * 5 + i + 1
                bola_val = cols_bolas[i].number_input(
                    f"Bola {bola_index}",
                    min_value=1,
                    max_value=25,
                    step=1,
                    key=f"bola_{bola_index}_input"
                )
                bolas.append(bola_val)

        submitted = st.form_submit_button("Adicionar Concurso")

        if submitted:
            # Validar se os 15 n√∫meros s√£o √∫nicos e v√°lidos
            if len(set(bolas)) != 15:
                st.error("Por favor, insira 15 n√∫meros √∫nicos para as bolas sorteadas.")
            elif any(not (1 <= b <= 25) for b in bolas):
                st.error("As bolas devem ser n√∫meros entre 1 e 25.")
            else:
                # Criar um DataFrame para o novo sorteio
                novo_sorteio_dict = {
                    'Concurso': int(concurso),
                    'Data Sorteio': data_sorteio.strftime("%Y-%m-%d") # <-- CORRE√á√ÉO AQUI (Formato AAAA-MM-DD para salvar no CSV)
                }
                # Garante que as bolas est√£o em ordem crescente para o CSV
                bolas_ordenadas = sorted(bolas)
                for i, bola in enumerate(bolas_ordenadas):
                    novo_sorteio_dict[f'Bola{i+1}'] = bola

                novo_df = pd.DataFrame([novo_sorteio_dict])

                try:
                    salvar_novo_sorteio_oficial(novo_df)
                except Exception as e:
                    st.error(f"Erro ao salvar o concurso: {e}")

# --- ABA 4: Tabela de Pre√ßos ---
with tab4:
    st.header("Tabela de Pre√ßos da Lotof√°cil")
    df_precos = carregar_tabela_precos()

    if not df_precos.empty:
        st.dataframe(df_precos, use_container_width=True)
    else:
        st.warning(f"Arquivo '{ARQUIVO_TABELA_PRECO_CSV}' n√£o encontrado ou vazio. Por favor, adicione um arquivo CSV com a tabela de pre√ßos.")

st.markdown("---")
st.markdown("Desenvolvido com ‚ù§Ô∏è por [Marcia Romanato - BOA SORTE!]")