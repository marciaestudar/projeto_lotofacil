# -*- coding: utf-8 -*-
"""lotofacil_simulador.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1plUcMWehZpBahegvvfiM3_BghUt-CEBN
"""

!pip install streamlit
import streamlit as st
import random
import pandas as pd
import collections

# --- Configura√ß√µes da P√°gina ---
st.set_page_config(
    page_title="Simulador de Lotof√°cil",
    page_icon="üé≤",
    layout="centered"
)

st.title("üé≤ Simulador de Lotof√°cil")
st.write("Gere sorteios aleat√≥rios e veja o hist√≥rico e estat√≠sticas.")

# --- Inicializa√ß√£o do Estado da Sess√£o ---
# Usaremos st.session_state para manter o hist√≥rico dos sorteios
if 'historico_sorteios' not in st.session_state:
    st.session_state.historico_sorteios = []

# --- Fun√ß√µes do Simulador ---

def gerar_sorteio_lotofacil():
    """Gera 15 n√∫meros √∫nicos entre 1 e 25."""
    sorteio = random.sample(range(1, 26), 15)
    sorteio.sort()  # Opcional: para exibir os n√∫meros em ordem crescente
    return sorteio

def adicionar_sorteio_ao_historico(sorteio):
    """Adiciona um sorteio ao hist√≥rico da sess√£o."""
    st.session_state.historico_sorteios.append(sorteio)

def calcular_estatisticas_simuladas():
    """Calcula a frequ√™ncia de cada n√∫mero nos sorteios simulados."""
    todos_numeros_sorteados = []
    for sorteio in st.session_state.historico_sorteios:
        todos_numeros_sorteados.extend(sorteio)

    if not todos_numeros_sorteados:
        return pd.DataFrame({'N√∫mero': [], 'Frequ√™ncia': []})

    frequencia = collections.Counter(todos_numeros_sorteados)
    df_frequencia = pd.DataFrame(frequencia.items(), columns=['N√∫mero', 'Frequ√™ncia'])
    df_frequencia = df_frequencia.sort_values(by='Frequ√™ncia', ascending=False)
    return df_frequencia

# --- Layout da Aplica√ß√£o Streamlit ---

# Se√ß√£o de Sorteio
st.header("Gerar Novo Sorteio")
if st.button("Sortear N√∫meros"):
    novo_sorteio = gerar_sorteio_lotofacil()
    adicionar_sorteio_ao_historico(novo_sorteio)
    st.success(f"Seu sorteio gerado: **{', '.join(map(str, novo_sorteio))}**")

# Se√ß√£o de Hist√≥rico
st.header("Hist√≥rico de Sorteios Simulados")
if st.session_state.historico_sorteios:
    # Exibe os √∫ltimos sorteios, ou um n√∫mero limitado para n√£o poluir a tela
    num_sorteios_para_mostrar = st.slider("Mostrar √∫ltimos X sorteios:", min_value=1, max_value=len(st.session_state.historico_sorteios), value=min(10, len(st.session_state.historico_sorteios)))

    st.write(f"√öltimos {num_sorteios_para_mostrar} sorteios:")
    for i, sorteio in enumerate(reversed(st.session_state.historico_sorteios[-num_sorteios_para_mostrar:])):
        st.markdown(f"**Sorteio {len(st.session_state.historico_sorteios) - i}:** {', '.join(map(str, sorteio))}")

    if st.button("Limpar Hist√≥rico"):
        st.session_state.historico_sorteios = []
        st.success("Hist√≥rico limpo!")
        st.rerun() # Recarrega a p√°gina para refletir a mudan√ßa
else:
    st.info("Nenhum sorteio ainda. Clique em 'Sortear N√∫meros' para come√ßar!")

# Se√ß√£o de Estat√≠sticas
st.header("Estat√≠sticas dos Seus Sorteios Simulados")
df_estatisticas = calcular_estatisticas_simuladas()

if not df_estatisticas.empty:
    st.write("Frequ√™ncia de cada n√∫mero nos seus sorteios simulados:")
    st.dataframe(df_estatisticas, use_container_width=True)

    # Gr√°fico de barras da frequ√™ncia
    st.subheader("Gr√°fico de Frequ√™ncia")
    st.bar_chart(df_estatisticas.set_index('N√∫mero'))

    st.info(f"Total de sorteios simulados: {len(st.session_state.historico_sorteios)}")
else:
    st.info("Gere alguns sorteios para ver as estat√≠sticas.")

st.markdown("---")
st.markdown("Desenvolvido com ‚ù§Ô∏è por [Marcia Romanato") # Opcional: Adicione sua assinatura